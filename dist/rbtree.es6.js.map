{"version":3,"file":"rbtree.es6.js","sources":["../index.js"],"sourcesContent":["function DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\nconst RED   = 0;\nconst BLACK = 1;\n\nfunction createNode(key, data, left = null, right = null, parent = null, color = RED) {\n  return { key, data, left, right, parent, color };\n}\n\nexport default class RBTree {\n\n  constructor(compare = DEFAULT_COMPARE, noDuplicates = false) {\n    this._comparator   = compare;\n    this._root         = null;\n    this._size         = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * @param {Number} key\n   * @param {*=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    let node;\n    const compare = this._comparator;\n    if (!this._root) {\n      node = createNode(key, data);\n      this._root = node;\n      node.color = BLACK;\n      this._size++;\n      return node;\n    }\n    let p = this._root;\n    if (this._noDuplicates) {\n      for (let n = this._root; n;) {\n        p = n;\n        const cmp = compare(key, n.key);\n        if (cmp < 0)      n = n.left;\n        else if (cmp > 0) n = n.right;\n        else              return n;\n      }\n    } else {\n      for (let n = this._root; n;) {\n        p = n;\n        if (compare(key, n.key) < 0) n = n.left;\n        else                         n = n.right;\n      }\n    }\n    node = createNode(key, data);\n    this._size++;\n    node.parent = p;\n    if (!p)                           this._root = node;\n    else if (compare(key, p.key) < 0) p.left = node;\n    else                              p.right = node;\n\n    this.insertFixup(node);\n    return node;\n  }\n\n\n\n\n  /**\n   * Insert case 2\n   * @param {*} key\n   * @param {*=} data\n   */\n  insertNode (key, data, parent) {\n    let node;\n    while (true) {\n      const cmp = this._comparator(key, parent.key);\n      if (cmp === 0) {\n        return null;\n      }\n      if (cmp > 0) {\n        if (parent.right !== null) {\n          parent = parent.right;\n        } else {\n          node = createNode(key, data);\n          node.parent = parent;\n          parent.right = node;\n          this._size++;\n          break;\n        }\n      } else if (cmp < 0) {\n        if (parent.left !== null) {\n          parent = parent.left;\n        } else {\n          node = createNode(key, data);\n          node.parent = parent;\n          parent.left = node;\n          this._size++;\n          break;\n        }\n      }\n    }\n    if (node) this.insertFixup(node);\n    return node;\n  }\n\n\n  insertFixup (node) {\n    for (let parent = node.parent; parent && parent.color === RED; parent = node.parent) {\n      if (parent === parent.parent.left) {\n        const uncle = parent.parent.right;\n        if (uncle && uncle.color === RED) {\n          parent.color = BLACK;\n          uncle.color = BLACK;\n          parent.parent.color = RED;\n          node = parent.parent;\n        } else if (node === parent.right) {\n          node = parent;\n          this.rotateLeft(node);\n        } else {\n          parent.color = BLACK;\n          parent.parent.color = BLACK;\n          this.rotateRight(parent.parent);\n        }\n      } else {\n        var uncle = parent.parent.left;\n        if (uncle && uncle.color === RED) {\n          parent.color = BLACK;\n          uncle.color = BLACK;\n          parent.parent.color = RED;\n          node = parent.parent;\n        } else if (node === parent.left) {\n          node = parent;\n          this.rotateRight(node);\n        } else {\n          parent.color = BLACK;\n          parent.parent.color = RED;\n          this.rotateLeft(parent.parent);\n        }\n      }\n    }\n    this._root.color = BLACK;\n  }\n\n\n  /**\n   * Rotate the node with its right child.\n   * @param node {Node} The node to rotate.\n   */\n  rotateLeft (node) {\n    let child = node.right;\n    node.right = child.left;\n\n    if (child.left) child.left.parent = node;\n    child.parent = node.parent;\n\n    if (node.parent === null) {\n      this._root = child;\n    } else if (node === node.parent.left) {\n      node.parent.left = child;\n    } else {\n      node.parent.right = child;\n    }\n\n    node.parent = child;\n    child.left = node;\n  }\n\n  /**\n   * Rotate the node with its left child.\n   * @param node {Node} The node to rotate.\n   * @return {void}\n   */\n  rotateRight (node) {\n    let child = node.left;\n    node.left = child.right;\n\n    if (child.right) child.right.parent = node;\n    child.parent = node.parent;\n\n    if (node.parent === null) {\n      this._root = child;\n    } else if (node === node.parent.left) {\n      node.parent.left = child;\n    } else {\n      node.parent.right = child;\n    }\n    node.parent = child;\n    child.right = node;\n  }\n\n\n  /**\n   * @param {Number} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    let node = this._root;\n    var comp = this._comparator;\n    while (node) {\n      const cmp = comp(node.key, key);\n      if      (cmp < 0) node = node.right;\n      else if (cmp > 0) node = node.left;\n      else              break;\n    }\n\n    if (node === null) return null;\n\n    // find node;\n    let successor;\n    this._size--;\n    if (node.left === null || node.right === null) successor = node;\n    else {\n      successor = this.next(node);\n      node.key  = successor.key;\n      node.data = successor.data;\n    }\n    let child;\n    if (successor.left === null) child = successor.right;\n    else                         child = successor.left;\n    if (child) child.parent = successor.parent;\n\n    if (!successor.parent) this._root = child;\n    else if (successor === successor.parent.left) successor.parent.left = child;\n    else                                          successor.parent.right = child;\n\n    if (successor.color === BLACK) this.removeFixup(child, successor.parent);\n    return node;\n  }\n\n\n  removeFixup (node, parent) {\n    while (node !== this._root && (node === null || node.color === BLACK)) {\n      if (node === parent.left) {\n        let brother = parent.right;\n        if (brother && brother.color === RED) {\n          brother.color = BLACK;\n          parent.color = RED;\n          this.rotateLeft(parent);\n          brother = parent.right;\n        }\n        if (brother &&\n          (brother.left  === null || brother.left.color  === BLACK) &&\n          (brother.right === null || brother.right.color === BLACK)) {\n          brother.color = RED;\n          node = parent;\n        } else if(brother) {\n          if (brother.right === null || brother.right.color === BLACK) {\n            brother.left.color = BLACK;\n            brother.color = RED;\n            this.rotateRight(brother);\n            brother = parent.right;\n          }\n          brother.color = parent.color;\n          parent.color = BLACK;\n          brother.right.color = BLACK;\n          this.rotateLeft(parent);\n          node = this._root;\n        }\n      } else {\n        let brother = parent.left;\n        if (brother && brother.color === RED) {\n          brother.color = BLACK;\n          parent.color = RED;\n          this.rotateRight(parent);\n          brother = parent.left;\n        }\n        if (brother &&\n          (brother.left  === null || brother.left.color  === BLACK) &&\n          (brother.right === null || brother.right.color === BLACK)) {\n          brother.color = RED;\n          node = parent;\n        } else if (brother) {\n          if (brother.left === null || brother.left.color === BLACK) {\n            brother.right.color = BLACK;\n            brother.color = RED;\n            this.rotateLeft(brother);\n            brother = parent.left;\n          }\n          brother.color = parent.color;\n          parent.color = BLACK;\n          brother.left.color = BLACK;\n          this.rotateRight(parent);\n          node = this._root;\n        }\n      }\n      parent = node.parent;\n    }\n    if (node) node.color = BLACK;\n  }\n\n\n  minNode(u = this._root) {\n    if (u) while (u.left) u = u.left;\n    return u;\n  }\n\n\n  maxNode(u = this._root) {\n    if (u) while (u.right) u = u.right;\n    return u;\n  }\n\n\n  find (key) {\n    var z    = this._root;\n    var comp = this._comparator;\n    while (z) {\n      var cmp = comp(z.key, key);\n      if      (cmp < 0) z = z.right;\n      else if (cmp > 0) z = z.left;\n      else              return z;\n    }\n    return null;\n  }\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    var node       = this._root;\n    var comparator = this._comparator;\n    while (node)  {\n      var cmp = comparator(key, node.key);\n      if      (cmp === 0) return true;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n\n    return false;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor && successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor && predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {SplayTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort = false) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    this._size = size;\n    return this;\n  }\n\n\n  min() {\n    var node = this.minNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n\n  max() {\n    var node = this.maxNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n  isEmpty() { return this._root === null; }\n  get size() { return this._size; }\n\n  toString(printNode) {\n    return print(this._root, printNode);\n  }\n\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * Create a tree and load it with items\n   * @param  {Array<Key>}          keys\n   * @param  {Array<Value>?}        [values]\n\n   * @param  {Function?}            [comparator]\n   * @param  {Boolean?}             [presort=false] Pre-sort keys and values, using\n   *                                               tree's comparator. Sorting is done\n   *                                               in-place\n   * @param  {Boolean?}             [noDuplicates=false]   Allow duplicates\n   * @return {SplayTree}\n   */\n  static createTree(keys, values, comparator, presort, noDuplicates) {\n    return new SplayTree(comparator, noDuplicates).load(keys, values, presort);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n\n\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nfunction print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nfunction isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n"],"names":[],"mappings":"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"}