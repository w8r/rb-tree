{"version":3,"file":"rbtree.js","sources":["../index.js"],"sourcesContent":["function DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\nconst RED   = 0;\nconst BLACK = 1;\n\nfunction createNode(key, data, left = null, right = null, parent = null, color = RED) {\n  return { key, data, left, right, parent, color };\n}\n\nexport default class RBTree {\n\n  constructor(compare = DEFAULT_COMPARE, noDuplicates = false) {\n    this._comparator   = compare;\n    this._root         = null;\n    this._size         = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * @param {Number} key\n   * @param {*=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    let node;\n    const compare = this._comparator;\n    if (!this._root) {\n      node = createNode(key, data);\n      this._root = node;\n      node.color = BLACK;\n      this._size++;\n      return node;\n    }\n    let p = this._root;\n    if (this._noDuplicates) {\n      for (let n = this._root; n;) {\n        p = n;\n        const cmp = compare(key, n.key);\n        if (cmp < 0)      n = n.left;\n        else if (cmp > 0) n = n.right;\n        else              return n;\n      }\n    } else {\n      for (let n = this._root; n;) {\n        p = n;\n        if (compare(key, n.key) < 0) n = n.left;\n        else                         n = n.right;\n      }\n    }\n    node = createNode(key, data);\n    this._size++;\n    node.parent = p;\n    if (!p)                           this._root = node;\n    else if (compare(key, p.key) < 0) p.left = node;\n    else                              p.right = node;\n\n    this.insertFixup(node);\n    return node;\n  }\n\n\n\n\n  /**\n   * Insert case 2\n   * @param {*} key\n   * @param {*=} data\n   */\n  insertNode (key, data, parent) {\n    let node;\n    while (true) {\n      const cmp = this._comparator(key, parent.key);\n      if (cmp === 0) {\n        return null;\n      }\n      if (cmp > 0) {\n        if (parent.right !== null) {\n          parent = parent.right;\n        } else {\n          node = createNode(key, data);\n          node.parent = parent;\n          parent.right = node;\n          this._size++;\n          break;\n        }\n      } else if (cmp < 0) {\n        if (parent.left !== null) {\n          parent = parent.left;\n        } else {\n          node = createNode(key, data);\n          node.parent = parent;\n          parent.left = node;\n          this._size++;\n          break;\n        }\n      }\n    }\n    if (node) this.insertFixup(node);\n    return node;\n  }\n\n\n  insertFixup (node) {\n    for (let parent = node.parent; parent && parent.color === RED; parent = node.parent) {\n      if (parent === parent.parent.left) {\n        const uncle = parent.parent.right;\n        if (uncle && uncle.color === RED) {\n          parent.color = BLACK;\n          uncle.color = BLACK;\n          parent.parent.color = RED;\n          node = parent.parent;\n        } else if (node === parent.right) {\n          node = parent;\n          this.rotateLeft(node);\n        } else {\n          parent.color = BLACK;\n          parent.parent.color = BLACK;\n          this.rotateRight(parent.parent);\n        }\n      } else {\n        var uncle = parent.parent.left;\n        if (uncle && uncle.color === RED) {\n          parent.color = BLACK;\n          uncle.color = BLACK;\n          parent.parent.color = RED;\n          node = parent.parent;\n        } else if (node === parent.left) {\n          node = parent;\n          this.rotateRight(node);\n        } else {\n          parent.color = BLACK;\n          parent.parent.color = RED;\n          this.rotateLeft(parent.parent);\n        }\n      }\n    }\n    this._root.color = BLACK;\n  }\n\n\n  /**\n   * Rotate the node with its right child.\n   * @param node {Node} The node to rotate.\n   */\n  rotateLeft (node) {\n    let child = node.right;\n    node.right = child.left;\n\n    if (child.left) child.left.parent = node;\n    child.parent = node.parent;\n\n    if (node.parent === null) {\n      this._root = child;\n    } else if (node === node.parent.left) {\n      node.parent.left = child;\n    } else {\n      node.parent.right = child;\n    }\n\n    node.parent = child;\n    child.left = node;\n  }\n\n  /**\n   * Rotate the node with its left child.\n   * @param node {Node} The node to rotate.\n   * @return {void}\n   */\n  rotateRight (node) {\n    let child = node.left;\n    node.left = child.right;\n\n    if (child.right) child.right.parent = node;\n    child.parent = node.parent;\n\n    if (node.parent === null) {\n      this._root = child;\n    } else if (node === node.parent.left) {\n      node.parent.left = child;\n    } else {\n      node.parent.right = child;\n    }\n    node.parent = child;\n    child.right = node;\n  }\n\n\n  /**\n   * @param {Number} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    let node = this._root;\n    var comp = this._comparator;\n    while (node) {\n      const cmp = comp(node.key, key);\n      if      (cmp < 0) node = node.right;\n      else if (cmp > 0) node = node.left;\n      else              break;\n    }\n\n    if (node === null) return null;\n\n    // find node;\n    let successor;\n    this._size--;\n    if (node.left === null || node.right === null) successor = node;\n    else {\n      successor = this.next(node);\n      node.key  = successor.key;\n      node.data = successor.data;\n    }\n    let child;\n    if (successor.left === null) child = successor.right;\n    else                         child = successor.left;\n    if (child) child.parent = successor.parent;\n\n    if (!successor.parent) this._root = child;\n    else if (successor === successor.parent.left) successor.parent.left = child;\n    else                                          successor.parent.right = child;\n\n    if (successor.color === BLACK) this.removeFixup(child, successor.parent);\n    return node;\n  }\n\n\n  removeFixup (node, parent) {\n    while (node !== this._root && (node === null || node.color === BLACK)) {\n      if (node === parent.left) {\n        let brother = parent.right;\n        if (brother && brother.color === RED) {\n          brother.color = BLACK;\n          parent.color = RED;\n          this.rotateLeft(parent);\n          brother = parent.right;\n        }\n        if (brother &&\n          (brother.left  === null || brother.left.color  === BLACK) &&\n          (brother.right === null || brother.right.color === BLACK)) {\n          brother.color = RED;\n          node = parent;\n        } else if(brother) {\n          if (brother.right === null || brother.right.color === BLACK) {\n            brother.left.color = BLACK;\n            brother.color = RED;\n            this.rotateRight(brother);\n            brother = parent.right;\n          }\n          brother.color = parent.color;\n          parent.color = BLACK;\n          brother.right.color = BLACK;\n          this.rotateLeft(parent);\n          node = this._root;\n        }\n      } else {\n        let brother = parent.left;\n        if (brother && brother.color === RED) {\n          brother.color = BLACK;\n          parent.color = RED;\n          this.rotateRight(parent);\n          brother = parent.left;\n        }\n        if (brother &&\n          (brother.left  === null || brother.left.color  === BLACK) &&\n          (brother.right === null || brother.right.color === BLACK)) {\n          brother.color = RED;\n          node = parent;\n        } else if (brother) {\n          if (brother.left === null || brother.left.color === BLACK) {\n            brother.right.color = BLACK;\n            brother.color = RED;\n            this.rotateLeft(brother);\n            brother = parent.left;\n          }\n          brother.color = parent.color;\n          parent.color = BLACK;\n          brother.left.color = BLACK;\n          this.rotateRight(parent);\n          node = this._root;\n        }\n      }\n      parent = node.parent;\n    }\n    if (node) node.color = BLACK;\n  }\n\n\n  minNode(u = this._root) {\n    if (u) while (u.left) u = u.left;\n    return u;\n  }\n\n\n  maxNode(u = this._root) {\n    if (u) while (u.right) u = u.right;\n    return u;\n  }\n\n\n  find (key) {\n    var z    = this._root;\n    var comp = this._comparator;\n    while (z) {\n      var cmp = comp(z.key, key);\n      if      (cmp < 0) z = z.right;\n      else if (cmp > 0) z = z.left;\n      else              return z;\n    }\n    return null;\n  }\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    var node       = this._root;\n    var comparator = this._comparator;\n    while (node)  {\n      var cmp = comparator(key, node.key);\n      if      (cmp === 0) return true;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n\n    return false;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor && successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor && predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {SplayTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort = false) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\n    this._root = loadRecursive(null, keys, values, 0, size);\n    this._size = size;\n    return this;\n  }\n\n\n  min() {\n    var node = this.minNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n\n  max() {\n    var node = this.maxNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n  isEmpty() { return this._root === null; }\n  get size() { return this._size; }\n\n  toString(printNode) {\n    return print(this._root, printNode);\n  }\n\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * Create a tree and load it with items\n   * @param  {Array<Key>}          keys\n   * @param  {Array<Value>?}        [values]\n\n   * @param  {Function?}            [comparator]\n   * @param  {Boolean?}             [presort=false] Pre-sort keys and values, using\n   *                                               tree's comparator. Sorting is done\n   *                                               in-place\n   * @param  {Boolean?}             [noDuplicates=false]   Allow duplicates\n   * @return {SplayTree}\n   */\n  static createTree(keys, values, comparator, presort, noDuplicates) {\n    return new SplayTree(comparator, noDuplicates).load(keys, values, presort);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n\n\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nfunction print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nfunction isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n"],"names":["const","let","n","this","uncle","brother"],"mappings":"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"}