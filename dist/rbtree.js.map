{"version":3,"file":"rbtree.js","sources":["../src/colors.ts","../src/node.ts","../src/tree.ts"],"sourcesContent":["import { Color } from './types';\n\nexport const BLACK:Color = 1;\nexport const RED:Color   = 0;\n","import { Key, Value, Color } from './types';\nimport { RED, BLACK } from './colors';\n\nexport default class Node<Key, Value> {\n\n  public color:Color = BLACK;\n  public key:Key;\n  public data:Value;\n\n  public left:Node<Key,Value>;\n  public right:Node<Key,Value>;\n  public parent:Node<Key,Value>;\n\n  constructor (color:Color, key?:Key, data?:Value,\n    parent:Node<Key,Value> = null, left:Node<Key,Value> = null, right:Node<Key,Value> = null) {\n    this.color = color;\n    this.parent = parent;\n    this.left = left;\n    this.right = right;\n    this.key = key;\n    this.data = data;\n  }\n}\n","import { Key, Value, Comparator } from './types';\nimport { RED, BLACK } from './colors';\nimport Node from './node';\n\nexport type Visitor<Key,Value> = (node:Node<Key,Value>) => void;\n\nconst nil:Node<Key,Value> = new Node(BLACK);\nconst DEFAULT_COMPARE:Comparator<Key> = (a:any, b:any) => a - b;\n\nexport default class Tree<Key, Value> {\n\n  private _compare:Comparator<Key> = DEFAULT_COMPARE;\n  private _root:Node<Key,Value>;\n  private _size:number = 0;\n\n  static nil:Node<any,any> = nil;\n\n  constructor(comparator:Comparator<Key> = DEFAULT_COMPARE) {\n    this._compare = comparator;\n    this._root = nil;\n    this._size = 0;\n  }\n\n\n  get root () {\n    return this._root;\n  }\n\n\n  get size () {\n    return this._size;\n  }\n\n\n  isEmpty() {\n    return this._root === nil;\n  }\n\n\n  find (key:Key) {\n    const compare = this._compare;\n    let cmp, x = this._root;\n    while (x !== nil) {\n      cmp = compare(key, x.key);\n      if (cmp === 0)    break;\n      else if (cmp < 0) x = x.left;\n      else              x = x.right;\n    }\n    return x === nil ? null : x;\n  }\n\n\n  private leftRotate (x:Node<Key, Value>) {\n    const y:Node<Key,Value> = x.right;\n    x.right = y.left;\n    if (y.left !== nil) y.left.parent = x;\n    y.parent = x.parent;\n    if (x.parent === nil)        this._root = y;\n    else if (x === x.parent.left) x.parent.left = y;\n    else                          x.parent.right = y;\n    y.left = x;\n    x.parent = y;\n  }\n\n\n  private rightRotate (x:Node<Key,Value>) {\n    const y:Node<Key,Value> = x.left;\n    x.left = y.right;\n    if (y.right !== nil) y.right.parent = x;\n    y.parent = x.parent;\n    if (x.parent === nil)         this._root = y;\n    else if (x === x.parent.right) x.parent.right = y;\n    else                           x.parent.left = y;\n\n    y.right = x;\n    x.parent = y;\n  }\n\n\n  private insertFixup (x:Node<Key,Value>) {\n    this._size++;\n    x.color = RED;\n    const root = this._root;\n\n    while (x !== root && x.parent.color == RED) {\n      if (x.parent === x.parent.parent.left) {\n        const y:Node<Key,Value> = x.parent.parent.right;\n        if (y.color == RED) {\n          x.parent.color = BLACK;\n          y.color = BLACK;\n          x.parent.parent.color = RED;\n          x = x.parent.parent;\n        } else {\n          if (x === x.parent.right) {\n            x = x.parent;\n            this.leftRotate(x);\n          }\n          x.parent.color = BLACK;\n          x.parent.parent.color = RED;\n          this.rightRotate(x.parent.parent);\n        }\n      } else {\n        const y:Node<Key,Value> = x.parent.parent.left;\n        if (y.color === RED) {\n          x.parent.color = BLACK;\n          y.color = BLACK;\n          x.parent.parent.color = RED;\n          x = x.parent.parent;\n        } else {\n          if (x === x.parent.left) {\n            x = x.parent;\n            this.rightRotate(x);\n          }\n          x.parent.color = BLACK;\n          x.parent.parent.color = RED;\n          this.leftRotate(x.parent.parent);\n        }\n      }\n    }\n    root.color = BLACK;\n  }\n\n\n  insert (key:Key, data?:Value) {\n    let y = nil;\n    let x = this._root;\n    let cmp = 0;\n    const compare = this._compare;\n\n    while (x !== nil) {\n      y = x;\n      cmp = compare(key, x.key);\n      if (cmp === 0)    break;\n      else if (cmp < 0) x = x.left;\n      else              x = x.right;\n    }\n\n    const nz = new Node(BLACK, key, data, y, nil, nil);\n    if (y === nil)   this._root = nz;\n    else if (cmp < 0) y.left = nz;\n    else              y.right = nz;\n\n    this.insertFixup(nz);\n    return nz;\n  }\n\n\n  remove (key:Key) {\n    let x = this._root;\n    const compare = this._compare;\n\n    while (x !== nil) {\n      let cmp = compare(key, x.key);\n      if (cmp === 0)    break;\n      else if (cmp < 0) x = x.left;\n      else              x = x.right;\n    }\n    if (x === nil) return null;\n    this._size--;\n    return this.deleteSubtree(x);\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    const min = this.minNode();\n    if (min) this.deleteSubtree(min);\n    return min;\n  }\n\n\n  private deleteSubtree (z:Node<Key,Value>) {\n    let y:Node<Key,Value>;\n    if (z.left === nil || z.right === nil) y = z; // y has a nil node as a child\n    else { // find tree successor with a nil node as a child\n      y = z.right;\n      while (y.left !== nil) y = y.left;\n    }\n\n    // x is y's only child\n    const x:Node<Key,Value> = y.left !== nil ? y.left : y.right;\n    x.parent = y.parent;\n    if (y.parent === nil) this._root = x;\n    else {\n      if (y === y.parent.left) y.parent.left = x;\n      else                     y.parent.right = x;\n    }\n    if (y !== z) z.key = y.key;\n    if (y.color === BLACK) this.deleteFixup(x);\n    return z;\n  }\n\n\n  private deleteFixup (x:Node<Key,Value>) {\n    const root = this._root;\n    while (x !== root && x.color === BLACK) {\n      if (x === x.parent.left) {\n        let w:Node<Key,Value> = x.parent.right;\n        if (w.color === RED) {\n          w.color = BLACK;\n          x.parent.color = RED;\n          this.leftRotate(x.parent);\n          w = x.parent.right;\n        }\n        if (w.left.color === BLACK && w.right.color === BLACK) {\n          w.color = RED;\n          x = x.parent;\n        } else {\n          if (w.right.color === BLACK) {\n            w.left.color = BLACK;\n            w.color = RED;\n            this.rightRotate(w);\n            w = x.parent.right;\n          }\n          w.color = x.parent.color;\n          x.parent.color = BLACK;\n          w.right.color = BLACK;\n          this.leftRotate(x.parent);\n          x = root;\n        }\n      } else {\n        let w:Node<Key,Value> = x.parent.left;\n        if (w.color === RED) {\n          w.color = BLACK;\n          x.parent.color = RED;\n          this.rightRotate(x.parent);\n          w = x.parent.left;\n        }\n        if (w.right.color === BLACK && w.left.color === BLACK) {\n          w.color = RED;\n          x = x.parent;\n        } else {\n          if (w.left.color == BLACK) {\n            w.right.color = BLACK;\n            w.color = RED;\n            this.leftRotate(w);\n            w = x.parent.left;\n          }\n          w.color = x.parent.color;\n          x.parent.color = BLACK;\n          w.left.color = BLACK;\n          this.rightRotate(x.parent);\n          x = root;\n        }\n      }\n    }\n    x.color = BLACK;\n  }\n\n\n  max () {\n    let x = this._root;\n    while (x !== nil && x.right !== nil) x = x.right;\n    return x === nil ? null : x.key;\n  }\n\n\n  min () {\n    let x = this._root;\n    while (x !== nil && x.left !== nil) x = x.left;\n    return x === nil ? null : x.key;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  minNode(t = this._root) {\n    if (t !== nil) while (t.left !== nil) t = t.left;\n    return t === nil ? null : t;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  maxNode(t = this._root) {\n    if (t !== nil) while (t.right !== nil) t = t.right;\n    return t === nil ? null : t;\n  }\n\n\n\n  /**\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key:Key) {\n    let current   = this._root;\n    const compare = this._compare;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return true;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return false;\n  }\n\n\n  /**\n   * @param  {Visitor} visitor\n   * @param  {*=}      ctx\n   * @return {SplayTree}\n   */\n  forEach (visitor:Visitor<Key,Value>, ctx?:any) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current !==  nil) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          visitor.call(ctx, current);\n\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index:number) {\n    let current = this._root, done = false, i = 0;\n    const Q = [];\n\n    while (!done) {\n      if (current !== nil) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = Q.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range (low:Key, high:Key, fn:Visitor<Key,Value>, ctx?:any) {\n    const Q = [];\n    const compare = this._compare;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns array of keys\n   * @return {Array<Key>}\n   */\n  keys () {\n    const keys:Array<Key> = [];\n    this.forEach(({ key }) => keys.push(key));\n    return keys;\n  }\n\n\n  /**\n   * Returns array of all the data in the nodes\n   * @return {Array<Value>}\n   */\n  values () {\n    const values:Array<Value> = [];\n    this.forEach(({ data }) => values.push(data));\n    return values;\n  }\n\n\n\n  /**\n   * @param  {Node}   d\n   * @return {Node|nil}\n   */\n  next (d:Node<Key,Value>) {\n    let root = this._root;\n    let successor = nil;\n\n    if (d.right !== nil) {\n      successor = d.right;\n      while (successor.left !== nil) successor = successor.left;\n      return successor;\n    }\n\n    const comparator = this._compare;\n    while (root !== nil) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) {\n        successor = root;\n        root = root.left;\n      } else root = root.right;\n    }\n\n    return successor === nil ? null : successor;\n  }\n\n\n  /**\n   * @param  {Node} d\n   * @return {Node|nil}\n   */\n  prev (d:Node<Key,Value>) {\n    let root = this._root;\n    let predecessor = nil;\n\n    if (d.left !== nil) {\n      predecessor = d.left;\n      while (predecessor.right !== nil) predecessor = predecessor.right;\n      return predecessor;\n    }\n\n    const comparator = this._compare;\n    while (root !== nil) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) root = root.left;\n      else {\n        predecessor = root;\n        root = root.right;\n      }\n    }\n    return predecessor === nil ? null : predecessor;\n  }\n\n  clear () {\n    this._root = nil;\n    this._size = 0;\n    return this;\n  }\n}\n"],"names":[],"mappings":"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"}